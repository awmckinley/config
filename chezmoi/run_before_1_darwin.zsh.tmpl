{{- if eq .chezmoi.os "darwin" -}}
#!{{ lookPath "zsh" }}
#
# Install packages in Darwin.

set -o errexit  # exit if any command fails
set -o nounset  # prevent using an undefined variable
set -o pipefail # pipelines fail early
IFS=$'\n\t'

# paths
brew_intel=/usr/local/bin/brew
brew_m1=/opt/homebrew/bin/brew
xcode=/Applications/Xcode.app/Contents/Developer

# Xcode: manual install from App Store
echo 'Looking for Xcode (please install if needed)...'
while test ! -d "$xcode"; do
	sleep 1
done
echo 'Found it!'
echo ''

# Xcode: xcodebuild requires Xcode
if command -v xcode-select >/dev/null 2>&1; then
	if test "$(xcode-select --print-path 2>&1)" != "$xcode"; then
		echo 'Switch to Xcode'
		sudo xcode-select --switch "$xcode"
		echo ''
	fi
fi

# Xcode: accept and update
if command -v xcodebuild >/dev/null 2>&1; then
	if ! xcodebuild -checkFirstLaunchStatus; then
		echo 'Accept Xcode license'
		sudo xcodebuild -license
		echo ''

		echo 'Update system content'
		xcodebuild -runFirstLaunch
		echo ''
	fi
fi

# Rosetta: install
if test "$(uname -m)" = 'arm64'; then
	# Check whether osascript runs in x86 mode
	if ! arch -x86_64 osascript -e '0' &>/dev/null; then
		echo 'Install Rosetta'
		sudo softwareupdate --install-rosetta --agree-to-license
		echo ''
	fi
fi

# locate: load
if ! launchctl print system | grep -q 'com.apple.locate'; then
	echo 'Load locate service'
	sudo launchctl load -w /System/Library/LaunchDaemons/com.apple.locate.plist
	echo ''
fi

# Homebrew: install
if test ! -x "$brew_intel" && test ! -x "$brew_m1"; then
	echo 'Install Homebrew'
	curl -fsSL 'https://raw.githubusercontent.com/Homebrew/install/master/install.sh' | bash
	echo ''
fi

# Nix: install w/ Determinate Nix
if test ! -h /nix/var/nix/profiles/default; then
	curl --proto '=https' --tlsv1.2 -sSf -L https://install.determinate.systems/nix | sh -s -- install
fi

# Nix: source Nix environment
if test -f /nix/var/nix/profiles/default/etc/profile.d/nix-daemon.sh; then
	. /nix/var/nix/profiles/default/etc/profile.d/nix-daemon.sh
fi

{{- end -}}
